---
export interface AccordionItemProps {
  header: string;
  children: any;
}

const { header = "", className = "" } = Astro.props;
---

<li class:list={[className, "accordion__item"]}>
  <button
    id="accordion_target_1"
    class="accordion__target"
    aria-expanded="false"
    aria-controls="accordion-panel-1"
  >
    <slot name="target" class="target">
      <h3 class="title-large">
        {header}
      </h3>
    </slot>
    <slot name="indicator">
      <svg
        class="header__toggle-indicator"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 448 512"
      >
        <path
          fill="currentColor"
          d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
        ></path>
      </svg>
    </slot>
  </button>
  <div
    id="accordion-panel-1"
    role="region"
    class="accordion__panel"
    aria-labelledby="accordion-target-1"
  >
    <div class="panel__content">
      <slot />
    </div>
  </div>
</li>

<style>
  .accordion__item {
    display: flex;
    flex-direction: column;
  }

  button.accordion__target {
    all: unset;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
    svg {
      width: 15px;
      height: 15px;
      margin-block: auto;
    }
  }

  .accordion__panel {
    display: grid;
    grid-template-rows: 0fr;
    transition: grid-template-rows var(--transitionDuration) ease-in 0s;
    .panel__content {
      overflow: hidden;
    }
  }

  .accordion__item.accordion__active > .accordion__panel {
    grid-template-rows: 1fr;
  }
</style>
